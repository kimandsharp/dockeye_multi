===============================
dockeye_multi is an interactive graphical tool 
to dock small ligands/drugs to proteins
It works as a plugin to PyMol,
which is used as a graphic rendering engine.
It is a fork off dockeye that handles multiple
ligand conformations- compared to dockeye it requires an extra
setup step to place multiple pregenerated 
conformer entries into the ligand pdb file.
Since dockeye_multi with one ligand conformer
is same as dockeye, the latter is  made
obsolete by dockeye_multi

===============================
directories:
===============================
src (source files, shared object file, makefile)
 sub_directories src_c, src_f contain the C and
 Fortran versions of the dockeye backend. The C version
 is full operational. The Fortran version is a straight
 translation using f2py. Both produce a module importable
 into Python. The C version has been tested on several platforms.
 The Fortran version works but has only been tested on one platform
example (all files needed to run th examples 
 trypsin/benzamidine, interleukin and antibody_digoxin)

===============================
INSTALLATION
===============================
USING downloaded builds (shared object files)
===============================
FOR MacOS, Ubuntu Linux (and possibly other Linux Distros)
change to the src directory in the dockeye home directory
make a soft link to the correct *.so
On MacOs
ln -s -i src_c/dockeyeM_energy_MacOS_python27_64bit.so dockeyeM_energy.so
On Ubuntu Linux 16.04:
ln -s -i src_c/dockeyeM_energy_linux16_python27_32bit.so dockeyeM_energy.so
On Ubuntu Linux 14.04
ln -s -i src_c/dockeyeM_energy_linux14_python27_32bit.so dockeyeM_energy.so

note some builds are 32bit because they work with older PyMol 
versions (pre-schrodinger and ones compiled from source at sourceforge.net). 


===============================
COMPILING FROM SOURCE
===============================
alternatively, you can compile from C code

some useful commands in this regard
% file <filename>.so # type of file : 32 bit/64 bit, binary, ELF etc
% otool <filename>.so # lists all required libraries and whether the are found 
(linux equiv cmd: ldd)

Change to the directory src_c 
A single C source file dockeyeM_energy.c needs to be compiled
to generate the shared object file to be soft linked to dockeyeM_energy.so
in the parent src directory
compile using the gcc compiler, using the makefile.
The makefile has various rules for MacOS and ubuntu Linux which
should work with little modification

Since this object file will be imported as a module in Python
it needs the python2.7 include file: Python.h
(may be part of your standard python install, or you
may need to install the Python development package)
Then if necessary edit the compiler options in the makefile:

-I<directory_where_Python.h_lives>
-lpython2.7  # should not need to change this default (this is for PyMol builds that use the python2.7)
-L<directory_where_PyMol's_Python_dynamic/shared_library_lives>

use the python-config command with --includes --libs and --ldflags
to find out where things are on your OS.

PyMol comes with its own Python install. This is the Python
that will import the dockeye module dockeyeM_energy,
so the compile may need the same libraries as PyMol's Python,
NOT the system Python libraries, EVEN if they are version 2.7
On MacOS, this may mean putting the path to the libraries hidden inside the PyMol.app
directory, like:

-L/Applications/PyMOL.app/Contents/lib/ # on my mac

or:
-L/home/sharp/Downloads/pymol/ext/lib/ on ubuntu 16.02

More recent PyMol builds use python3.6 and later, so the the rules in the makefile
should be changed to use python3.X includes and library directories

for details on using dockeye_multi, read dockeye_workflow.pdf
and run the examples
