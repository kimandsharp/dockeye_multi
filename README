===============================
dockeye_multi is an interactive graphical tool 
to dock small ligands/drugs to proteins
It works as a plugin to PyMol,
which is used as a graphic rendering engine.
It is a fork off dockeye that handles multiple
ligand conformations- compared to dockeye it requires an extra
setup step to place multiple pregenerated 
conformer entries into the ligand pdb file.
Since dockeye_multi with one ligand conformer
is same as dockeye, the latter is  made
obsolete by dockeye_multi

===============================
directories:
===============================
src (source files, shared object file, makefile)
example (all files needed to run 
examples trypsin/benzamidine, interleukin and antibody_digoxin)

===============================
INSTALLATION
===============================

1)
If you are lucky, one of the shared object files dockeyeM_energy_XX.so
in the src directory will work- some builds are 32bit because 
they work with older pymol versions (pre-schrodinger and ones compiled
from source at sourceforge.net). In this case
in the source directory make a soft link from the correct *.so to
dockeyeM_energy.so. for example on MacOs
ln -s -i dockeyeM_energy_MacOS_python27_64bit.so dockeyeM_energy.so

Otherwise go to 
Option 2), compile from C code

some useful commands in this regard
% file dockeyeM_energy_XX.so # type of file 
% otool -L dockeyeM_energy_XX.so # libraries required/linked (linux equiv cmd: ldd)

2)
Compile from c source code with the gcc compiler, using the makefile.
The makefile has various rules for MacOS and ubuntu Linux which
should work with little modifification

A single C source file dockeyeM_energy.c needs to be compiled
to generate the shared object file dockeyeM_energy.so

Since this object file will be imported as a module in Python
it needs the python2.7 include file: Python.h
(may be part of your standard python install, or you
may need to install the Python development package)
Then if necessary edit the compiler options in the makefile:

-I<directory_where_Python.h_lives>
-lpython2.7  # should not need to change this default
-L<directory_where_PyMol's_Python_dynamic/shared_library_lives>

use the python-config command with --includes --libs and --ldflags
to find out where things are on your OS.

PyMol comes with its own Python install. This is the Python
that will import the dockeye module dockeyeM_energy,
so the compile may need the same libraries as PyMol's Python,
NOT the system Python libraries, EVEN if they are version 2.7
On MacOS, this may mean putting the path to the libraries hidden inside the PyMol.app
directory, like:

-L/Applications/PyMOL.app/Contents/lib/ # on my mac

or:
-L/home/sharp/Downloads/pymol/ext/lib/ on ubuntu 16.02

3)
Whether you are using a precompiled *.so file or 
the one you compiled, you need to 
set the environment variable PYTHONPATH to
the dockeye source directory, something like:
cshell: setenv PYTHONPATH /home/<username>/source/dockeye_multi/src
bash: export PYTHONPATH='/home/<username>/source/dockeye_multi/src'

or if PYTHONPATH is already defined, add the dockeye src directory to it
cshell: setenv PYTHONPATH /home/<username>/source/dockeye_multi/src:$PYTHONPATH

to check, start the python2.7 interpretor at the command line and try to import dockeye_methods
if succesful, PYTHONPATH is set correctly

for details on using dockeye_multi, read dockeye_workflow.pdf
and run the examples
